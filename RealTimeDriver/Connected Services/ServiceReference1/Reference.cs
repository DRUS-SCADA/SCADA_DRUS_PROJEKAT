//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealTimeDriver.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IRealTimeDriver")]
    public interface IRealTimeDriver {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/SendMessage", ReplyAction="http://tempuri.org/IRealTimeDriver/SendMessageResponse")]
        void SendMessage(double number, string address, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/SendMessage", ReplyAction="http://tempuri.org/IRealTimeDriver/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(double number, string address, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/changeAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/changeAddressResponse")]
        void changeAddress(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/changeAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/changeAddressResponse")]
        System.Threading.Tasks.Task changeAddressAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/freeAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/freeAddressResponse")]
        void freeAddress(string addresss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/freeAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/freeAddressResponse")]
        System.Threading.Tasks.Task freeAddressAsync(string addresss);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/GetAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/GetAddressResponse")]
        string[] GetAddress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriver/GetAddress", ReplyAction="http://tempuri.org/IRealTimeDriver/GetAddressResponse")]
        System.Threading.Tasks.Task<string[]> GetAddressAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeDriverChannel : RealTimeDriver.ServiceReference1.IRealTimeDriver, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeDriverClient : System.ServiceModel.ClientBase<RealTimeDriver.ServiceReference1.IRealTimeDriver>, RealTimeDriver.ServiceReference1.IRealTimeDriver {
        
        public RealTimeDriverClient() {
        }
        
        public RealTimeDriverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RealTimeDriverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeDriverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeDriverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendMessage(double number, string address, byte[] signature) {
            base.Channel.SendMessage(number, address, signature);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(double number, string address, byte[] signature) {
            return base.Channel.SendMessageAsync(number, address, signature);
        }
        
        public void changeAddress(string address) {
            base.Channel.changeAddress(address);
        }
        
        public System.Threading.Tasks.Task changeAddressAsync(string address) {
            return base.Channel.changeAddressAsync(address);
        }
        
        public void freeAddress(string addresss) {
            base.Channel.freeAddress(addresss);
        }
        
        public System.Threading.Tasks.Task freeAddressAsync(string addresss) {
            return base.Channel.freeAddressAsync(addresss);
        }
        
        public string[] GetAddress() {
            return base.Channel.GetAddress();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAddressAsync() {
            return base.Channel.GetAddressAsync();
        }
    }
}
