//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AlarmDisplay.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogInput", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    [System.SerializableAttribute()]
    public partial class AnalogInput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.ServiceReference1.Alarm[] AlarmsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AnalogValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DriverStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IOAdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ONOFF_scanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.ServiceReference1.States StatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.ServiceReference1.Alarm[] Alarms {
            get {
                return this.AlarmsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmsField, value) != true)) {
                    this.AlarmsField = value;
                    this.RaisePropertyChanged("Alarms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AnalogValue {
            get {
                return this.AnalogValueField;
            }
            set {
                if ((this.AnalogValueField.Equals(value) != true)) {
                    this.AnalogValueField = value;
                    this.RaisePropertyChanged("AnalogValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriverString {
            get {
                return this.DriverStringField;
            }
            set {
                if ((object.ReferenceEquals(this.DriverStringField, value) != true)) {
                    this.DriverStringField = value;
                    this.RaisePropertyChanged("DriverString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAdress {
            get {
                return this.IOAdressField;
            }
            set {
                if ((object.ReferenceEquals(this.IOAdressField, value) != true)) {
                    this.IOAdressField = value;
                    this.RaisePropertyChanged("IOAdress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ONOFF_scan {
            get {
                return this.ONOFF_scanField;
            }
            set {
                if ((this.ONOFF_scanField.Equals(value) != true)) {
                    this.ONOFF_scanField = value;
                    this.RaisePropertyChanged("ONOFF_scan");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.ServiceReference1.States States {
            get {
                return this.StatesField;
            }
            set {
                if ((this.StatesField.Equals(value) != true)) {
                    this.StatesField = value;
                    this.RaisePropertyChanged("States");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Alarm", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    [System.SerializableAttribute()]
    public partial class Alarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.ServiceReference1.Priorities PrioritiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.ServiceReference1.State StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TresholdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AlarmDisplay.ServiceReference1.Types TypesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.ServiceReference1.Priorities Priorities {
            get {
                return this.PrioritiesField;
            }
            set {
                if ((this.PrioritiesField.Equals(value) != true)) {
                    this.PrioritiesField = value;
                    this.RaisePropertyChanged("Priorities");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.ServiceReference1.State State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Treshold {
            get {
                return this.TresholdField;
            }
            set {
                if ((this.TresholdField.Equals(value) != true)) {
                    this.TresholdField = value;
                    this.RaisePropertyChanged("Treshold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AlarmDisplay.ServiceReference1.Types Types {
            get {
                return this.TypesField;
            }
            set {
                if ((this.TypesField.Equals(value) != true)) {
                    this.TypesField = value;
                    this.RaisePropertyChanged("Types");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="States", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    public enum States : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REGULAR = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ALARM = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Priorities", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    public enum Priorities : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ONE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TWO = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        THREE = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="State", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    public enum State : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IN = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OUT = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Types", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    public enum Types : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOW = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HIGH = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalogOutput", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    [System.SerializableAttribute()]
    public partial class AnalogOutput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HighLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IOAdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double InitialValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double LowLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double HighLimit {
            get {
                return this.HighLimitField;
            }
            set {
                if ((this.HighLimitField.Equals(value) != true)) {
                    this.HighLimitField = value;
                    this.RaisePropertyChanged("HighLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAdress {
            get {
                return this.IOAdressField;
            }
            set {
                if ((object.ReferenceEquals(this.IOAdressField, value) != true)) {
                    this.IOAdressField = value;
                    this.RaisePropertyChanged("IOAdress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double InitialValue {
            get {
                return this.InitialValueField;
            }
            set {
                if ((this.InitialValueField.Equals(value) != true)) {
                    this.InitialValueField = value;
                    this.RaisePropertyChanged("InitialValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LowLimit {
            get {
                return this.LowLimitField;
            }
            set {
                if ((this.LowLimitField.Equals(value) != true)) {
                    this.LowLimitField = value;
                    this.RaisePropertyChanged("LowLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalInput", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    [System.SerializableAttribute()]
    public partial class DigitalInput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IOAdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ONOFF_scanField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ScanTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double digitalValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IOAdress {
            get {
                return this.IOAdressField;
            }
            set {
                if ((object.ReferenceEquals(this.IOAdressField, value) != true)) {
                    this.IOAdressField = value;
                    this.RaisePropertyChanged("IOAdress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ONOFF_scan {
            get {
                return this.ONOFF_scanField;
            }
            set {
                if ((this.ONOFF_scanField.Equals(value) != true)) {
                    this.ONOFF_scanField = value;
                    this.RaisePropertyChanged("ONOFF_scan");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ScanTime {
            get {
                return this.ScanTimeField;
            }
            set {
                if ((this.ScanTimeField.Equals(value) != true)) {
                    this.ScanTimeField = value;
                    this.RaisePropertyChanged("ScanTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double digitalValue {
            get {
                return this.digitalValueField;
            }
            set {
                if ((this.digitalValueField.Equals(value) != true)) {
                    this.digitalValueField = value;
                    this.RaisePropertyChanged("digitalValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DigitalOutput", Namespace="http://schemas.datacontract.org/2004/07/SCADACore")]
    [System.SerializableAttribute()]
    public partial class DigitalOutput : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IO_AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double initial_ValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tag_nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IO_Adress {
            get {
                return this.IO_AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.IO_AdressField, value) != true)) {
                    this.IO_AdressField = value;
                    this.RaisePropertyChanged("IO_Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double initial_Value {
            get {
                return this.initial_ValueField;
            }
            set {
                if ((this.initial_ValueField.Equals(value) != true)) {
                    this.initial_ValueField = value;
                    this.RaisePropertyChanged("initial_Value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tag_name {
            get {
                return this.tag_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.tag_nameField, value) != true)) {
                    this.tag_nameField = value;
                    this.RaisePropertyChanged("tag_name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuthentication")]
    public interface IAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        string Registration(string name, string surname, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Registration", ReplyAction="http://tempuri.org/IAuthentication/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string name, string surname, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/DeleteProfile", ReplyAction="http://tempuri.org/IAuthentication/DeleteProfileResponse")]
        bool DeleteProfile(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/DeleteProfile", ReplyAction="http://tempuri.org/IAuthentication/DeleteProfileResponse")]
        System.Threading.Tasks.Task<bool> DeleteProfileAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Login", ReplyAction="http://tempuri.org/IAuthentication/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/ChangePassword", ReplyAction="http://tempuri.org/IAuthentication/ChangePasswordResponse")]
        string ChangePassword(string username, string password, string update_password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/ChangePassword", ReplyAction="http://tempuri.org/IAuthentication/ChangePasswordResponse")]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(string username, string password, string update_password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        bool Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthentication/Logout", ReplyAction="http://tempuri.org/IAuthentication/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationChannel : AlarmDisplay.ServiceReference1.IAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationClient : System.ServiceModel.ClientBase<AlarmDisplay.ServiceReference1.IAuthentication>, AlarmDisplay.ServiceReference1.IAuthentication {
        
        public AuthenticationClient() {
        }
        
        public AuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Registration(string name, string surname, string username, string password) {
            return base.Channel.Registration(name, surname, username, password);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string name, string surname, string username, string password) {
            return base.Channel.RegistrationAsync(name, surname, username, password);
        }
        
        public bool DeleteProfile(string username, string password) {
            return base.Channel.DeleteProfile(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProfileAsync(string username, string password) {
            return base.Channel.DeleteProfileAsync(username, password);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public string ChangePassword(string username, string password, string update_password) {
            return base.Channel.ChangePassword(username, password, update_password);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(string username, string password, string update_password) {
            return base.Channel.ChangePasswordAsync(username, password, update_password);
        }
        
        public bool Logout(string token) {
            return base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDatabaseManager")]
    public interface IDatabaseManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAI", ReplyAction="http://tempuri.org/IDatabaseManager/AddAIResponse")]
        void AddAI(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAI", ReplyAction="http://tempuri.org/IDatabaseManager/AddAIResponse")]
        System.Threading.Tasks.Task AddAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAO", ReplyAction="http://tempuri.org/IDatabaseManager/AddAOResponse")]
        void AddAO(AlarmDisplay.ServiceReference1.AnalogOutput AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAO", ReplyAction="http://tempuri.org/IDatabaseManager/AddAOResponse")]
        System.Threading.Tasks.Task AddAOAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDI", ReplyAction="http://tempuri.org/IDatabaseManager/AddDIResponse")]
        void AddDI(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDI", ReplyAction="http://tempuri.org/IDatabaseManager/AddDIResponse")]
        System.Threading.Tasks.Task AddDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDO", ReplyAction="http://tempuri.org/IDatabaseManager/AddDOResponse")]
        void AddDO(AlarmDisplay.ServiceReference1.DigitalOutput DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddDO", ReplyAction="http://tempuri.org/IDatabaseManager/AddDOResponse")]
        System.Threading.Tasks.Task AddDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeDO", ReplyAction="http://tempuri.org/IDatabaseManager/removeDOResponse")]
        void removeDO(AlarmDisplay.ServiceReference1.DigitalOutput DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeDO", ReplyAction="http://tempuri.org/IDatabaseManager/removeDOResponse")]
        System.Threading.Tasks.Task removeDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeAO", ReplyAction="http://tempuri.org/IDatabaseManager/removeAOResponse")]
        void removeAO(AlarmDisplay.ServiceReference1.AnalogOutput AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeAO", ReplyAction="http://tempuri.org/IDatabaseManager/removeAOResponse")]
        System.Threading.Tasks.Task removeAOAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeAI", ReplyAction="http://tempuri.org/IDatabaseManager/removeAIResponse")]
        void removeAI(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeAI", ReplyAction="http://tempuri.org/IDatabaseManager/removeAIResponse")]
        System.Threading.Tasks.Task removeAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeDI", ReplyAction="http://tempuri.org/IDatabaseManager/removeDIResponse")]
        void removeDI(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/removeDI", ReplyAction="http://tempuri.org/IDatabaseManager/removeDIResponse")]
        System.Threading.Tasks.Task removeDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAO", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAOResponse")]
        AlarmDisplay.ServiceReference1.AnalogOutput[] LoadDataToGridAO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAO", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAOResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.AnalogOutput[]> LoadDataToGridAOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGrid", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridResponse")]
        AlarmDisplay.ServiceReference1.DigitalOutput[] LoadDataToGrid();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGrid", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.DigitalOutput[]> LoadDataToGridAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAI", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAIResponse")]
        AlarmDisplay.ServiceReference1.AnalogInput[] LoadDataToGridAI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAI", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAIResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.AnalogInput[]> LoadDataToGridAIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridDI", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridDIResponse")]
        AlarmDisplay.ServiceReference1.DigitalInput[] LoadDataToGridDI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridDI", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridDIResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.DigitalInput[]> LoadDataToGridDIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAlarmResponse")]
        AlarmDisplay.ServiceReference1.Alarm[] LoadDataToGridAlarm(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadDataToGridAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/LoadDataToGridAlarmResponse")]
        System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.Alarm[]> LoadDataToGridAlarmAsync(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChanges", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesResponse")]
        void SaveChanges(AlarmDisplay.ServiceReference1.AnalogOutput AO, double change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChanges", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesResponse")]
        System.Threading.Tasks.Task SaveChangesAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO, double change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesDO", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesDOResponse")]
        void SaveChangesDO(AlarmDisplay.ServiceReference1.DigitalOutput DO, double change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesDO", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesDOResponse")]
        System.Threading.Tasks.Task SaveChangesDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO, double change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesAI", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesAIResponse")]
        void SaveChangesAI(AlarmDisplay.ServiceReference1.AnalogInput AI, bool change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesAI", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesAIResponse")]
        System.Threading.Tasks.Task SaveChangesAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI, bool change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesDI", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesDIResponse")]
        void SaveChangesDI(AlarmDisplay.ServiceReference1.DigitalInput DI, bool change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/SaveChangesDI", ReplyAction="http://tempuri.org/IDatabaseManager/SaveChangesDIResponse")]
        System.Threading.Tasks.Task SaveChangesDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI, bool change);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Simulation", ReplyAction="http://tempuri.org/IDatabaseManager/SimulationResponse")]
        void Simulation(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Simulation", ReplyAction="http://tempuri.org/IDatabaseManager/SimulationResponse")]
        System.Threading.Tasks.Task SimulationAsync(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Simulation1", ReplyAction="http://tempuri.org/IDatabaseManager/Simulation1Response")]
        void Simulation1(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/Simulation1", ReplyAction="http://tempuri.org/IDatabaseManager/Simulation1Response")]
        System.Threading.Tasks.Task Simulation1Async(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadThreadDi", ReplyAction="http://tempuri.org/IDatabaseManager/LoadThreadDiResponse")]
        void LoadThreadDi();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadThreadDi", ReplyAction="http://tempuri.org/IDatabaseManager/LoadThreadDiResponse")]
        System.Threading.Tasks.Task LoadThreadDiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadThreadAi", ReplyAction="http://tempuri.org/IDatabaseManager/LoadThreadAiResponse")]
        void LoadThreadAi();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/LoadThreadAi", ReplyAction="http://tempuri.org/IDatabaseManager/LoadThreadAiResponse")]
        System.Threading.Tasks.Task LoadThreadAiAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/startPLC", ReplyAction="http://tempuri.org/IDatabaseManager/startPLCResponse")]
        void startPLC();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/startPLC", ReplyAction="http://tempuri.org/IDatabaseManager/startPLCResponse")]
        System.Threading.Tasks.Task startPLCAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAI", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressAI(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAI", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIAsync(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDI", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDIResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressDI(System.Collections.Generic.Dictionary<string, bool> DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDI", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDIResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDIAsync(System.Collections.Generic.Dictionary<string, bool> DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAO", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAOResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressAO(System.Collections.Generic.Dictionary<string, bool> AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAO", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAOResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAOAsync(System.Collections.Generic.Dictionary<string, bool> AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDO", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDOResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressDO(System.Collections.Generic.Dictionary<string, bool> DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDO", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDOResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDOAsync(System.Collections.Generic.Dictionary<string, bool> DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAIfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIfreeResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressAIfree(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAIfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIfreeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIfreeAsync(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAIRTUfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIRTUfreeResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressAIRTUfree(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAIRTUfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAIRTUfreeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIRTUfreeAsync(System.Collections.Generic.Dictionary<string, bool> AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDIfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDIfreeResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressDIfree(System.Collections.Generic.Dictionary<string, bool> DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDIfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDIfreeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDIfreeAsync(System.Collections.Generic.Dictionary<string, bool> DI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAOfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAOfreeResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressAOfree(System.Collections.Generic.Dictionary<string, bool> AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressAOfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressAOfreeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAOfreeAsync(System.Collections.Generic.Dictionary<string, bool> AO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDOfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDOfreeResponse")]
        System.Collections.Generic.Dictionary<string, bool> loadAdressDOfree(System.Collections.Generic.Dictionary<string, bool> DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/loadAdressDOfree", ReplyAction="http://tempuri.org/IDatabaseManager/loadAdressDOfreeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDOfreeAsync(System.Collections.Generic.Dictionary<string, bool> DO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/clearData", ReplyAction="http://tempuri.org/IDatabaseManager/clearDataResponse")]
        void clearData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/clearData", ReplyAction="http://tempuri.org/IDatabaseManager/clearDataResponse")]
        System.Threading.Tasks.Task clearDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/WriteXML", ReplyAction="http://tempuri.org/IDatabaseManager/WriteXMLResponse")]
        void WriteXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/WriteXML", ReplyAction="http://tempuri.org/IDatabaseManager/WriteXMLResponse")]
        System.Threading.Tasks.Task WriteXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ReadXML", ReplyAction="http://tempuri.org/IDatabaseManager/ReadXMLResponse")]
        void ReadXML();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ReadXML", ReplyAction="http://tempuri.org/IDatabaseManager/ReadXMLResponse")]
        System.Threading.Tasks.Task ReadXMLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        void RemoveAlarm(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/RemoveAlarm", ReplyAction="http://tempuri.org/IDatabaseManager/RemoveAlarmResponse")]
        System.Threading.Tasks.Task RemoveAlarmAsync(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarmToAI", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmToAIResponse")]
        void AddAlarmToAI(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/AddAlarmToAI", ReplyAction="http://tempuri.org/IDatabaseManager/AddAlarmToAIResponse")]
        System.Threading.Tasks.Task AddAlarmToAIAsync(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ClearCollections", ReplyAction="http://tempuri.org/IDatabaseManager/ClearCollectionsResponse")]
        void ClearCollections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ClearCollections", ReplyAction="http://tempuri.org/IDatabaseManager/ClearCollectionsResponse")]
        System.Threading.Tasks.Task ClearCollectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ClearDictionaries", ReplyAction="http://tempuri.org/IDatabaseManager/ClearDictionariesResponse")]
        void ClearDictionaries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ClearDictionaries", ReplyAction="http://tempuri.org/IDatabaseManager/ClearDictionariesResponse")]
        System.Threading.Tasks.Task ClearDictionariesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/clearDataAlarmDisplay", ReplyAction="http://tempuri.org/IDatabaseManager/clearDataAlarmDisplayResponse")]
        void clearDataAlarmDisplay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/clearDataAlarmDisplay", ReplyAction="http://tempuri.org/IDatabaseManager/clearDataAlarmDisplayResponse")]
        System.Threading.Tasks.Task clearDataAlarmDisplayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ShutdownAlarmDisplay", ReplyAction="http://tempuri.org/IDatabaseManager/ShutdownAlarmDisplayResponse")]
        void ShutdownAlarmDisplay();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ShutdownAlarmDisplay", ReplyAction="http://tempuri.org/IDatabaseManager/ShutdownAlarmDisplayResponse")]
        System.Threading.Tasks.Task ShutdownAlarmDisplayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ShutdownTrendingApp", ReplyAction="http://tempuri.org/IDatabaseManager/ShutdownTrendingAppResponse")]
        void ShutdownTrendingApp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseManager/ShutdownTrendingApp", ReplyAction="http://tempuri.org/IDatabaseManager/ShutdownTrendingAppResponse")]
        System.Threading.Tasks.Task ShutdownTrendingAppAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseManagerChannel : AlarmDisplay.ServiceReference1.IDatabaseManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerClient : System.ServiceModel.ClientBase<AlarmDisplay.ServiceReference1.IDatabaseManager>, AlarmDisplay.ServiceReference1.IDatabaseManager {
        
        public DatabaseManagerClient() {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAI(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            base.Channel.AddAI(AI);
        }
        
        public System.Threading.Tasks.Task AddAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.AddAIAsync(AI);
        }
        
        public void AddAO(AlarmDisplay.ServiceReference1.AnalogOutput AO) {
            base.Channel.AddAO(AO);
        }
        
        public System.Threading.Tasks.Task AddAOAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO) {
            return base.Channel.AddAOAsync(AO);
        }
        
        public void AddDI(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            base.Channel.AddDI(DI);
        }
        
        public System.Threading.Tasks.Task AddDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            return base.Channel.AddDIAsync(DI);
        }
        
        public void AddDO(AlarmDisplay.ServiceReference1.DigitalOutput DO) {
            base.Channel.AddDO(DO);
        }
        
        public System.Threading.Tasks.Task AddDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO) {
            return base.Channel.AddDOAsync(DO);
        }
        
        public void removeDO(AlarmDisplay.ServiceReference1.DigitalOutput DO) {
            base.Channel.removeDO(DO);
        }
        
        public System.Threading.Tasks.Task removeDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO) {
            return base.Channel.removeDOAsync(DO);
        }
        
        public void removeAO(AlarmDisplay.ServiceReference1.AnalogOutput AO) {
            base.Channel.removeAO(AO);
        }
        
        public System.Threading.Tasks.Task removeAOAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO) {
            return base.Channel.removeAOAsync(AO);
        }
        
        public void removeAI(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            base.Channel.removeAI(AI);
        }
        
        public System.Threading.Tasks.Task removeAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.removeAIAsync(AI);
        }
        
        public void removeDI(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            base.Channel.removeDI(DI);
        }
        
        public System.Threading.Tasks.Task removeDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            return base.Channel.removeDIAsync(DI);
        }
        
        public AlarmDisplay.ServiceReference1.AnalogOutput[] LoadDataToGridAO() {
            return base.Channel.LoadDataToGridAO();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.AnalogOutput[]> LoadDataToGridAOAsync() {
            return base.Channel.LoadDataToGridAOAsync();
        }
        
        public AlarmDisplay.ServiceReference1.DigitalOutput[] LoadDataToGrid() {
            return base.Channel.LoadDataToGrid();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.DigitalOutput[]> LoadDataToGridAsync() {
            return base.Channel.LoadDataToGridAsync();
        }
        
        public AlarmDisplay.ServiceReference1.AnalogInput[] LoadDataToGridAI() {
            return base.Channel.LoadDataToGridAI();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.AnalogInput[]> LoadDataToGridAIAsync() {
            return base.Channel.LoadDataToGridAIAsync();
        }
        
        public AlarmDisplay.ServiceReference1.DigitalInput[] LoadDataToGridDI() {
            return base.Channel.LoadDataToGridDI();
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.DigitalInput[]> LoadDataToGridDIAsync() {
            return base.Channel.LoadDataToGridDIAsync();
        }
        
        public AlarmDisplay.ServiceReference1.Alarm[] LoadDataToGridAlarm(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.LoadDataToGridAlarm(AI);
        }
        
        public System.Threading.Tasks.Task<AlarmDisplay.ServiceReference1.Alarm[]> LoadDataToGridAlarmAsync(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.LoadDataToGridAlarmAsync(AI);
        }
        
        public void SaveChanges(AlarmDisplay.ServiceReference1.AnalogOutput AO, double change) {
            base.Channel.SaveChanges(AO, change);
        }
        
        public System.Threading.Tasks.Task SaveChangesAsync(AlarmDisplay.ServiceReference1.AnalogOutput AO, double change) {
            return base.Channel.SaveChangesAsync(AO, change);
        }
        
        public void SaveChangesDO(AlarmDisplay.ServiceReference1.DigitalOutput DO, double change) {
            base.Channel.SaveChangesDO(DO, change);
        }
        
        public System.Threading.Tasks.Task SaveChangesDOAsync(AlarmDisplay.ServiceReference1.DigitalOutput DO, double change) {
            return base.Channel.SaveChangesDOAsync(DO, change);
        }
        
        public void SaveChangesAI(AlarmDisplay.ServiceReference1.AnalogInput AI, bool change) {
            base.Channel.SaveChangesAI(AI, change);
        }
        
        public System.Threading.Tasks.Task SaveChangesAIAsync(AlarmDisplay.ServiceReference1.AnalogInput AI, bool change) {
            return base.Channel.SaveChangesAIAsync(AI, change);
        }
        
        public void SaveChangesDI(AlarmDisplay.ServiceReference1.DigitalInput DI, bool change) {
            base.Channel.SaveChangesDI(DI, change);
        }
        
        public System.Threading.Tasks.Task SaveChangesDIAsync(AlarmDisplay.ServiceReference1.DigitalInput DI, bool change) {
            return base.Channel.SaveChangesDIAsync(DI, change);
        }
        
        public void Simulation(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            base.Channel.Simulation(DI);
        }
        
        public System.Threading.Tasks.Task SimulationAsync(AlarmDisplay.ServiceReference1.DigitalInput DI) {
            return base.Channel.SimulationAsync(DI);
        }
        
        public void Simulation1(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            base.Channel.Simulation1(AI);
        }
        
        public System.Threading.Tasks.Task Simulation1Async(AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.Simulation1Async(AI);
        }
        
        public void LoadThreadDi() {
            base.Channel.LoadThreadDi();
        }
        
        public System.Threading.Tasks.Task LoadThreadDiAsync() {
            return base.Channel.LoadThreadDiAsync();
        }
        
        public void LoadThreadAi() {
            base.Channel.LoadThreadAi();
        }
        
        public System.Threading.Tasks.Task LoadThreadAiAsync() {
            return base.Channel.LoadThreadAiAsync();
        }
        
        public void startPLC() {
            base.Channel.startPLC();
        }
        
        public System.Threading.Tasks.Task startPLCAsync() {
            return base.Channel.startPLCAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressAI(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAI(AI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIAsync(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAIAsync(AI);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressDI(System.Collections.Generic.Dictionary<string, bool> DI) {
            return base.Channel.loadAdressDI(DI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDIAsync(System.Collections.Generic.Dictionary<string, bool> DI) {
            return base.Channel.loadAdressDIAsync(DI);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressAO(System.Collections.Generic.Dictionary<string, bool> AO) {
            return base.Channel.loadAdressAO(AO);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAOAsync(System.Collections.Generic.Dictionary<string, bool> AO) {
            return base.Channel.loadAdressAOAsync(AO);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressDO(System.Collections.Generic.Dictionary<string, bool> DO) {
            return base.Channel.loadAdressDO(DO);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDOAsync(System.Collections.Generic.Dictionary<string, bool> DO) {
            return base.Channel.loadAdressDOAsync(DO);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressAIfree(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAIfree(AI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIfreeAsync(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAIfreeAsync(AI);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressAIRTUfree(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAIRTUfree(AI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAIRTUfreeAsync(System.Collections.Generic.Dictionary<string, bool> AI) {
            return base.Channel.loadAdressAIRTUfreeAsync(AI);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressDIfree(System.Collections.Generic.Dictionary<string, bool> DI) {
            return base.Channel.loadAdressDIfree(DI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDIfreeAsync(System.Collections.Generic.Dictionary<string, bool> DI) {
            return base.Channel.loadAdressDIfreeAsync(DI);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressAOfree(System.Collections.Generic.Dictionary<string, bool> AO) {
            return base.Channel.loadAdressAOfree(AO);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressAOfreeAsync(System.Collections.Generic.Dictionary<string, bool> AO) {
            return base.Channel.loadAdressAOfreeAsync(AO);
        }
        
        public System.Collections.Generic.Dictionary<string, bool> loadAdressDOfree(System.Collections.Generic.Dictionary<string, bool> DO) {
            return base.Channel.loadAdressDOfree(DO);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, bool>> loadAdressDOfreeAsync(System.Collections.Generic.Dictionary<string, bool> DO) {
            return base.Channel.loadAdressDOfreeAsync(DO);
        }
        
        public void clearData() {
            base.Channel.clearData();
        }
        
        public System.Threading.Tasks.Task clearDataAsync() {
            return base.Channel.clearDataAsync();
        }
        
        public void WriteXML() {
            base.Channel.WriteXML();
        }
        
        public System.Threading.Tasks.Task WriteXMLAsync() {
            return base.Channel.WriteXMLAsync();
        }
        
        public void ReadXML() {
            base.Channel.ReadXML();
        }
        
        public System.Threading.Tasks.Task ReadXMLAsync() {
            return base.Channel.ReadXMLAsync();
        }
        
        public void RemoveAlarm(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI) {
            base.Channel.RemoveAlarm(alarm, AI);
        }
        
        public System.Threading.Tasks.Task RemoveAlarmAsync(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.RemoveAlarmAsync(alarm, AI);
        }
        
        public void AddAlarmToAI(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI) {
            base.Channel.AddAlarmToAI(alarm, AI);
        }
        
        public System.Threading.Tasks.Task AddAlarmToAIAsync(AlarmDisplay.ServiceReference1.Alarm alarm, AlarmDisplay.ServiceReference1.AnalogInput AI) {
            return base.Channel.AddAlarmToAIAsync(alarm, AI);
        }
        
        public void ClearCollections() {
            base.Channel.ClearCollections();
        }
        
        public System.Threading.Tasks.Task ClearCollectionsAsync() {
            return base.Channel.ClearCollectionsAsync();
        }
        
        public void ClearDictionaries() {
            base.Channel.ClearDictionaries();
        }
        
        public System.Threading.Tasks.Task ClearDictionariesAsync() {
            return base.Channel.ClearDictionariesAsync();
        }
        
        public void clearDataAlarmDisplay() {
            base.Channel.clearDataAlarmDisplay();
        }
        
        public System.Threading.Tasks.Task clearDataAlarmDisplayAsync() {
            return base.Channel.clearDataAlarmDisplayAsync();
        }
        
        public void ShutdownAlarmDisplay() {
            base.Channel.ShutdownAlarmDisplay();
        }
        
        public System.Threading.Tasks.Task ShutdownAlarmDisplayAsync() {
            return base.Channel.ShutdownAlarmDisplayAsync();
        }
        
        public void ShutdownTrendingApp() {
            base.Channel.ShutdownTrendingApp();
        }
        
        public System.Threading.Tasks.Task ShutdownTrendingAppAsync() {
            return base.Channel.ShutdownTrendingAppAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ITrending", CallbackContract=typeof(AlarmDisplay.ServiceReference1.ITrendingCallback))]
    public interface ITrending {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrending/SubscriberInitialization", ReplyAction="http://tempuri.org/ITrending/SubscriberInitializationResponse")]
        void SubscriberInitialization();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrending/SubscriberInitialization", ReplyAction="http://tempuri.org/ITrending/SubscriberInitializationResponse")]
        System.Threading.Tasks.Task SubscriberInitializationAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnValueReceived")]
        void OnValueReceived(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnValueReceived1")]
        void OnValueReceived1(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnRemoveDI")]
        void OnRemoveDI(AlarmDisplay.ServiceReference1.DigitalInput DI);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnRemoveAI")]
        void OnRemoveAI(AlarmDisplay.ServiceReference1.AnalogInput AI);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnClearAI")]
        void OnClearAI();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnClearDI")]
        void OnClearDI();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/ShutdownTrending")]
        void ShutdownTrending();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITrending/OnStateChanged")]
        void OnStateChanged(AlarmDisplay.ServiceReference1.AnalogInput analogInput);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITrendingChannel : AlarmDisplay.ServiceReference1.ITrending, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TrendingClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.ServiceReference1.ITrending>, AlarmDisplay.ServiceReference1.ITrending {
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TrendingClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscriberInitialization() {
            base.Channel.SubscriberInitialization();
        }
        
        public System.Threading.Tasks.Task SubscriberInitializationAsync() {
            return base.Channel.SubscriberInitializationAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAlarmDisplay", CallbackContract=typeof(AlarmDisplay.ServiceReference1.IAlarmDisplayCallback))]
    public interface IAlarmDisplay {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/SubscriberInitialization2", ReplyAction="http://tempuri.org/IAlarmDisplay/SubscriberInitialization2Response")]
        void SubscriberInitialization2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAlarmDisplay/SubscriberInitialization2", ReplyAction="http://tempuri.org/IAlarmDisplay/SubscriberInitialization2Response")]
        System.Threading.Tasks.Task SubscriberInitialization2Async();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmDisplay/OnAlarmActivate")]
        void OnAlarmActivate(AlarmDisplay.ServiceReference1.Alarm alarm, int count);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmDisplay/OnAlarmStop")]
        void OnAlarmStop(AlarmDisplay.ServiceReference1.Alarm alarm);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmDisplay/ClearAlarms")]
        void ClearAlarms();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAlarmDisplay/ShutdownAlarm")]
        void ShutdownAlarm();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAlarmDisplayChannel : AlarmDisplay.ServiceReference1.IAlarmDisplay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AlarmDisplayClient : System.ServiceModel.DuplexClientBase<AlarmDisplay.ServiceReference1.IAlarmDisplay>, AlarmDisplay.ServiceReference1.IAlarmDisplay {
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AlarmDisplayClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscriberInitialization2() {
            base.Channel.SubscriberInitialization2();
        }
        
        public System.Threading.Tasks.Task SubscriberInitialization2Async() {
            return base.Channel.SubscriberInitialization2Async();
        }
    }
}
